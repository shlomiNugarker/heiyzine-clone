// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mongodb", "mysql", "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  pdfs          PDF[]
  sessions      Session[]
  accounts      Account[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PDF {
  id          String   @id @default(cuid())
  title       String
  fileName    String
  fileSize    Int
  totalPages  Int

  // S3 or cloud storage URL
  storageUrl  String?

  // Thumbnail for preview
  thumbnail   String?

  // Processing status
  status      ProcessingStatus @default(PENDING)

  // Metadata
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  viewCount   Int       @default(0)
  shareCount  Int       @default(0)

  // Relations
  userId      String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pages       PDFPage[]
  analytics   PDFAnalytics[]

  @@index([userId])
  @@index([createdAt])
  @@index([status])
  @@map("pdfs")
}

model PDFPage {
  id         String   @id @default(cuid())
  pdfId      String
  pageNumber Int
  imageUrl   String   @db.Text
  width      Int?
  height     Int?
  createdAt  DateTime @default(now())

  pdf        PDF      @relation(fields: [pdfId], references: [id], onDelete: Cascade)

  @@unique([pdfId, pageNumber])
  @@index([pdfId])
  @@map("pdf_pages")
}

model PDFAnalytics {
  id          String   @id @default(cuid())
  pdfId       String
  eventType   AnalyticsEventType
  eventData   Json?
  ipAddress   String?
  userAgent   String?
  country     String?
  city        String?
  createdAt   DateTime @default(now())

  pdf         PDF      @relation(fields: [pdfId], references: [id], onDelete: Cascade)

  @@index([pdfId])
  @@index([createdAt])
  @@index([eventType])
  @@map("pdf_analytics")
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum AnalyticsEventType {
  VIEW
  PAGE_TURN
  DOWNLOAD
  SHARE
  UPLOAD
}
